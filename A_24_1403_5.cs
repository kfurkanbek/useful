using System;

public static class Kata
{
  public static string read(byte[][] card)
  {
    byte[] line = new byte[card.Length];
    char[] message = new char[card[0].Length];
    for(int i=0; i < card[0].Length; i++)
    {
      for(int j=0; j < card.Length; j++)
      {
        line[j] = card[j][i];
      }
      message[i] = Protocol_A_24_1403_5(line);
    }

    return new string(message);
  }

  private static char Protocol_A_24_1403_5(byte[] line)
  {
    char[] alphabet = new char[]{'&','-','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','/','S','T','U','V','W','X','Y','Z','b','#','@','\'','>','V','?','.','¤','[','<','§','!','$','*',']',';','^','±',',','%','_','\\','¶'};
    byte[][] charSet = new byte[][]
    {
      new byte[]{1,0,0,0,0,0,0,0,0,0,0,0}, // &
      new byte[]{0,1,0,0,0,0,0,0,0,0,0,0}, // -
      new byte[]{0,0,1,0,0,0,0,0,0,0,0,0}, // 0
      new byte[]{0,0,0,1,0,0,0,0,0,0,0,0}, // 1
      new byte[]{0,0,0,0,1,0,0,0,0,0,0,0}, // 2
      new byte[]{0,0,0,0,0,1,0,0,0,0,0,0}, // 3
      new byte[]{0,0,0,0,0,0,1,0,0,0,0,0}, // 4
      new byte[]{0,0,0,0,0,0,0,1,0,0,0,0}, // 5
      new byte[]{0,0,0,0,0,0,0,0,1,0,0,0}, // 6
      new byte[]{0,0,0,0,0,0,0,0,0,1,0,0}, // 7
      new byte[]{0,0,0,0,0,0,0,0,0,0,1,0}, // 8
      new byte[]{0,0,0,0,0,0,0,0,0,0,0,1}, // 9

      new byte[]{1,0,0,1,0,0,0,0,0,0,0,0}, // A
      new byte[]{1,0,0,0,1,0,0,0,0,0,0,0}, // B
      new byte[]{1,0,0,0,0,1,0,0,0,0,0,0}, // C
      new byte[]{1,0,0,0,0,0,1,0,0,0,0,0}, // D
      new byte[]{1,0,0,0,0,0,0,1,0,0,0,0}, // E
      new byte[]{1,0,0,0,0,0,0,0,1,0,0,0}, // F
      new byte[]{1,0,0,0,0,0,0,0,0,1,0,0}, // G
      new byte[]{1,0,0,0,0,0,0,0,0,0,1,0}, // H
      new byte[]{1,0,0,0,0,0,0,0,0,0,0,1}, // I

      new byte[]{0,1,0,1,0,0,0,0,0,0,0,0}, // J
      new byte[]{0,1,0,0,1,0,0,0,0,0,0,0}, // K
      new byte[]{0,1,0,0,0,1,0,0,0,0,0,0}, // L
      new byte[]{0,1,0,0,0,0,1,0,0,0,0,0}, // M
      new byte[]{0,1,0,0,0,0,0,1,0,0,0,0}, // N
      new byte[]{0,1,0,0,0,0,0,0,1,0,0,0}, // O
      new byte[]{0,1,0,0,0,0,0,0,0,1,0,0}, // P
      new byte[]{0,1,0,0,0,0,0,0,0,0,1,0}, // Q
      new byte[]{0,1,0,0,0,0,0,0,0,0,0,1}, // R

      new byte[]{0,0,1,1,0,0,0,0,0,0,0,0}, // /
      new byte[]{0,0,1,0,1,0,0,0,0,0,0,0}, // S
      new byte[]{0,0,1,0,0,1,0,0,0,0,0,0}, // T
      new byte[]{0,0,1,0,0,0,1,0,0,0,0,0}, // U
      new byte[]{0,0,1,0,0,0,0,1,0,0,0,0}, // V
      new byte[]{0,0,1,0,0,0,0,0,1,0,0,0}, // W
      new byte[]{0,0,1,0,0,0,0,0,0,1,0,0}, // X
      new byte[]{0,0,1,0,0,0,0,0,0,0,1,0}, // Y
      new byte[]{0,0,1,0,0,0,0,0,0,0,0,1}, // Z

      new byte[]{0,0,0,0,1,0,0,0,0,0,1,0}, // b
      new byte[]{0,0,0,0,0,1,0,0,0,0,1,0}, // #
      new byte[]{0,0,0,0,0,0,1,0,0,0,1,0}, // @
      new byte[]{0,0,0,0,0,0,0,1,0,0,1,0}, // '
      new byte[]{0,0,0,0,0,0,0,0,1,0,1,0}, // >
      new byte[]{0,0,0,0,0,0,0,0,0,1,1,0}, // V
      
      new byte[]{1,0,1,0,0,0,0,0,0,0,0,0}, // ?
      new byte[]{1,0,0,0,0,1,0,0,0,0,1,0}, // .
      new byte[]{1,0,0,0,0,0,1,0,0,0,1,0}, // ¤
      new byte[]{1,0,0,0,0,0,0,1,0,0,1,0}, // [
      new byte[]{1,0,0,0,0,0,0,0,1,0,1,0}, // <
      new byte[]{1,0,0,0,0,0,0,0,0,1,1,0}, // § 
      
      new byte[]{0,1,1,0,0,0,0,0,0,0,1,0}, // !
      new byte[]{0,1,0,0,0,1,0,0,0,0,1,0}, // $
      new byte[]{0,1,0,0,0,0,1,0,0,0,1,0}, // *
      new byte[]{0,1,0,0,0,0,0,1,0,0,1,0}, // ]
      new byte[]{0,1,0,0,0,0,0,0,1,0,1,0}, // ;
      new byte[]{0,1,0,0,0,0,0,0,0,1,1,0}, // ^ 

      new byte[]{0,0,1,0,1,0,0,0,0,0,1,0}, // ±
      new byte[]{0,0,1,0,0,1,0,0,0,0,1,0}, // ,
      new byte[]{0,0,1,0,0,0,1,0,0,0,1,0}, // %
      new byte[]{0,0,1,0,0,0,0,1,0,0,1,0}, // _
      new byte[]{0,0,1,0,0,0,0,0,1,0,1,0}, // \
      new byte[]{0,0,1,0,0,0,0,0,0,1,1,0}, // ¶f
    };

    for(int idx=0; idx<alphabet.Length; idx++)
    {
      if(line.SequenceEqual(charSet[idx]))
      {
        return alphabet[idx];
      }
    }
    return 'ê';
  }

  public static void Main()
  {
    byte[][] data = new byte[][]
    {
      new byte[]{1,0,0,0,0,0,0,0,0,0,0},
      new byte[]{0,0,0,0,0,0,0,0,0,0,0},
      new byte[]{0,1,0,0,1,0,0,1,0,1,0},
      new byte[]{1,0,0,0,0,1,0,0,0,0,0},
      new byte[]{0,0,1,0,0,0,0,0,0,0,0},
      new byte[]{0,0,0,0,0,0,0,0,1,0,0},
      new byte[]{0,0,0,1,0,0,1,0,0,0,0},
      new byte[]{0,1,0,0,1,0,0,0,0,1,1},
      new byte[]{0,0,0,0,0,0,0,0,0,0,0},
      new byte[]{0,0,0,0,0,0,0,0,0,0,0},
      new byte[]{0,1,0,0,1,0,0,0,0,1,0},
      new byte[]{0,0,0,0,0,0,0,0,0,0,0}
    };
    Console.WriteLine(read(data));
  }
}
